javascript:(()=>{function getConversationId(){const urlPath=window.location.pathname;const matches=urlPath.match(/\/chat\/([a-f0-9-]+)/);return matches?matches[1]:null}function getOrganizationId(){return extractClaudeOrgID()}function extractClaudeOrgID(){console.log("🔍 Starting advanced organizationID extraction...");const conversationId=window.location.pathname.match(/\/chat\/([a-f0-9-]+)/)?.[1];console.log(`📝 Current conversation ID: ${conversationId}`);console.log("Method 1: Checking localStorage...");for(let i=0;i<localStorage.length;i++){const key=localStorage.key(i);try{const value=localStorage.getItem(key);if(value&&value.includes("organizationID")){console.log(`Found potential match in localStorage key: ${key}`);try{const parsed=JSON.parse(value);const orgId=extractOrgIdFromObject(parsed);if(orgId){console.log(`✅ Found organizationID in localStorage: ${orgId}`);return orgId}}catch(e){}}}catch(e){}}console.log("Method 2: Checking sessionStorage...");for(let i=0;i<sessionStorage.length;i++){const key=sessionStorage.key(i);try{const value=sessionStorage.getItem(key);if(value&&value.includes("organizationID")){console.log(`Found potential match in sessionStorage key: ${key}`);try{const parsed=JSON.parse(value);const orgId=extractOrgIdFromObject(parsed);if(orgId){console.log(`✅ Found organizationID in sessionStorage: ${orgId}`);return orgId}}catch(e){}}}catch(e){}}console.log("Method 3: Checking global window variables...");const potentialPaths=["window.__NEXT_DATA__.props.pageProps.organization.uuid","window.__NEXT_DATA__.props.pageProps.organization.id","window.__NEXT_DATA__.props.pageProps.organizationID","window.__PRELOADED_STATE__.organization.uuid","window.__PRELOADED_STATE__.organization.id","window.app.organization.uuid","window.app.organization.id","window.app.user.organization.uuid"];for(const path of potentialPaths){try{const value=eval(path);if(value&&/^[a-f0-9-]{36}$/.test(value)){console.log(`✅ Found organizationID in ${path}: ${value}`);return value}}catch(e){}}console.log("Method 4: Checking cookies...");const cookies=document.cookie.split(';');for(const cookie of cookies){const[name,value]=cookie.trim().split('=');if(name.toLowerCase().includes('organization')||name.toLowerCase().includes('org')){console.log(`Checking cookie: ${name}=${value}`);if(/^[a-f0-9-]{36}$/.test(value)){console.log(`✅ Found organizationID in cookie ${name}: ${value}`);return value}}}console.log("Method 5: Searching DOM for data attributes...");const elementsWithData=document.querySelectorAll('[data-organization-id], [data-org-id], [data-organization-uuid]');elementsWithData.forEach(elem=>{['organizationId','orgId','organizationUuid'].forEach(attr=>{const value=elem.dataset[attr];if(value&&/^[a-f0-9-]{36}$/.test(value)){console.log(`✅ Found organizationID in DOM data-${attr}: ${value}`);return value}})});const orgId=prompt("Unable to automatically detect organization ID. Please enter it manually:");if(orgId&&/^[a-f0-9-]{36}$/.test(orgId)){console.log(`✅ Using manually entered organizationID: ${orgId}`);return orgId}else{console.error("❌ Invalid or no organization ID provided");return null}}function extractOrgIdFromObject(obj,depth=0,maxDepth=5){if(!obj||typeof obj!=='object'||depth>maxDepth){return null}if(obj.organizationID&&/^[a-f0-9-]{36}$/.test(obj.organizationID)){return obj.organizationID}if(obj.customIDs&&obj.customIDs.organizationID&&/^[a-f0-9-]{36}$/.test(obj.customIDs.organizationID)){return obj.customIDs.organizationID}if(obj.organization&&obj.organization.uuid&&/^[a-f0-9-]{36}$/.test(obj.organization.uuid)){return obj.organization.uuid}if(obj.organization&&obj.organization.id&&/^[a-f0-9-]{36}$/.test(obj.organization.id)){return obj.organization.id}for(const key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)&&typeof obj[key]==='object'&&obj[key]!==null){const result=extractOrgIdFromObject(obj[key],depth+1,maxDepth);if(result){return result}}}return null}function sanitizeFilename(filename){if(!filename)return'claude_conversation';return filename.replace(/\s+/g,'_').replace(/[^\w\-\.]/g,'').replace(/_{2,}/g,'_').replace(/^_|_$/g,'').substring(0,200)||'claude_conversation'}function buildApiUrl(){const orgId=getOrganizationId();const convId=getConversationId();if(!orgId||!convId){console.error('Could not find organization ID or conversation ID');return null}return`https://claude.ai/api/organizations/${orgId}/chat_conversations/${convId}?tree=True&rendering_mode=messages&render_all_tools=true`}function showNotification(message,type='info'){const notification=document.createElement('div');notification.style.cssText=`position:fixed;top:20px;right:20px;padding:15px 20px;border-radius:8px;color:white;font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,sans-serif;font-size:14px;z-index:10000;box-shadow:0 4px 12px rgba(0,0,0,0.3);max-width:350px;word-wrap:break-word;transition:all 0.3s ease;`;if(type==='info'){notification.style.backgroundColor='#3498db'}else if(type==='success'){notification.style.backgroundColor='#27ae60'}else if(type==='error'){notification.style.backgroundColor='#e74c3c'}notification.innerHTML=message;document.body.appendChild(notification);setTimeout(()=>{if(notification.parentNode){notification.style.opacity='0';setTimeout(()=>{if(notification.parentNode){notification.parentNode.removeChild(notification)}},300)}},4000)}function convertToMarkdown(data){let markdown=`# ${data.name}\n\n`;if(data.summary){markdown+=`## Summary\n${data.summary}\n\n`}markdown+=`*Created: ${new Date(data.created_at).toLocaleString()}*\n\n`;markdown+=`---\n\n`;data.chat_messages.forEach(message=>{const sender=message.sender==='human'?'👤 **Human**':'🤖 **Claude**';markdown+=`## ${sender}\n\n`;if(message.content&&message.content.length>0){message.content.forEach(content=>{if(content.type==='thinking'&&content.thinking){const thinkingText=content.thinking.includes('characters truncated')?'**Note:** Full thinking content is truncated in the export.\n\n':content.thinking;markdown+=`**Thinking:**\n\`\`\`\n${thinkingText}\n\`\`\`\n\n`;if(content.summaries&&content.summaries.length>0){markdown+=`**Summaries:**\n`;content.summaries.forEach(summary=>{markdown+=`- ${summary.summary}\n`});markdown+=`\n`}}else if(content.type==='text'&&content.text){markdown+=`${content.text}\n\n`}else if(content.type==='tool_use'&&content.input){markdown+=`**Tool Use:**\n\`\`\`\n`;if(typeof content.input==='string'){markdown+=content.input}else if(content.input.content){if(typeof content.input.content==='string'&&content.input.content.includes('characters truncated')){markdown+='**Note:** Tool use content is truncated.\n'}else{markdown+=JSON.stringify(content.input.content,null,2)}}else{markdown+=JSON.stringify(content.input,null,2)}markdown+=`\n\`\`\`\n\n`}else if(content.type==='tool_result'&&content.content){markdown+=`**Tool Result:**\n\`\`\`\n`;content.content.forEach(resultContent=>{if(resultContent.type==='text'&&resultContent.text){markdown+=resultContent.text}});markdown+=`\n\`\`\`\n\n`}})}if(message.attachments&&message.attachments.length>0){markdown+=`**Attachments:**\n`;message.attachments.forEach(attachment=>{markdown+=`- ${attachment.file_name||'Unnamed file'}`;if(attachment.extracted_content){markdown+=`\n  Content: ${attachment.extracted_content.substring(0,200)}...`}markdown+=`\n`});markdown+=`\n`}markdown+=`*${new Date(message.created_at).toLocaleString()}*\n\n`;markdown+=`---\n\n`});return markdown}function fetchAndDownloadConversation(){const orgId=getOrganizationId();const convId=getConversationId();showNotification('🔍 Starting Claude conversation export...','info');console.log('📊 Export Status:');console.log(`Organization ID: ${orgId}`);console.log(`Conversation ID: ${convId}`);if(!orgId||!convId){const errorMsg='❌ Could not detect organization ID or conversation ID';console.error(errorMsg);showNotification(errorMsg,'error');return}showNotification(`📋 Detected IDs:<br>Org: ${orgId.substring(0,8)}...<br>Conv: ${convId.substring(0,8)}...`,'info');const apiUrl=buildApiUrl();if(!apiUrl){console.error('Failed to build API URL');showNotification('❌ Failed to build API URL','error');return}console.log('Fetching conversation from:',apiUrl);fetch(apiUrl,{method:'GET',credentials:'include'}).then(response=>{if(!response.ok){throw new Error(`HTTP error! Status: ${response.status}`)}return response.json()}).then(data=>{console.log('✅ Conversation data retrieved successfully');const baseFilename=sanitizeFilename(data.name);const markdownFilename=`${baseFilename}.md`;const jsonFilename=`${baseFilename}.json`;console.log(`📝 Conversation Details:`);console.log(`  Name: ${data.name}`);console.log(`  Created: ${new Date(data.created_at).toLocaleString()}`);console.log(`  Messages: ${data.chat_messages?data.chat_messages.length:0}`);console.log(`  Filename: ${baseFilename}`);showNotification(`📝 Exporting: "${data.name}"<br>📅 Created: ${new Date(data.created_at).toLocaleDateString()}<br>💬 Messages: ${data.chat_messages?data.chat_messages.length:0}`,'info');const markdownContent=convertToMarkdown(data);const jsonData=JSON.stringify(data,null,2);const jsonUri='data:application/json;charset=utf-8,'+encodeURIComponent(jsonData);const markdownUri='data:text/markdown;charset=utf-8,'+encodeURIComponent(markdownContent);const exportLink=document.createElement('a');exportLink.setAttribute('href',markdownUri);exportLink.setAttribute('download',markdownFilename);exportLink.click();console.log(`📄 Markdown download initiated: ${markdownFilename}`);setTimeout(()=>{const jsonLink=document.createElement('a');jsonLink.setAttribute('href',jsonUri);jsonLink.setAttribute('download',jsonFilename);jsonLink.click();console.log(`📄 JSON download initiated: ${jsonFilename}`);showNotification(`✅ Export completed!<br>📁 Files: ${markdownFilename} & ${jsonFilename}`,'success')},1000)}).catch(error=>{console.error('❌ Error fetching conversation data:',error);showNotification(`❌ Export failed: ${error.message}`,'error')})}fetchAndDownloadConversation()})();